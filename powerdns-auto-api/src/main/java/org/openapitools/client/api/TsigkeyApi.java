/*
 * PowerDNS Authoritative HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.TSIGKey;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TsigkeyApi {
    private ApiClient localVarApiClient;

    public TsigkeyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TsigkeyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createTSIGKey
     * @param serverId The id of the server (required)
     * @param tsigkey The TSIGKey to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. A key with this name already exists </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entry, the TSIGKey provided has issues. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. There was a problem creating the key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTSIGKeyCall(String serverId, TSIGKey tsigkey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = tsigkey;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/tsigkeys"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTSIGKeyValidateBeforeCall(String serverId, TSIGKey tsigkey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling createTSIGKey(Async)");
        }
        
        // verify the required parameter 'tsigkey' is set
        if (tsigkey == null) {
            throw new ApiException("Missing the required parameter 'tsigkey' when calling createTSIGKey(Async)");
        }
        

        okhttp3.Call localVarCall = createTSIGKeyCall(serverId, tsigkey, _callback);
        return localVarCall;

    }

    /**
     * Add a TSIG key
     * This methods add a new TSIGKey. The actual key can be generated by the server or be provided by the client
     * @param serverId The id of the server (required)
     * @param tsigkey The TSIGKey to add (required)
     * @return TSIGKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. A key with this name already exists </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entry, the TSIGKey provided has issues. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. There was a problem creating the key </td><td>  -  </td></tr>
     </table>
     */
    public TSIGKey createTSIGKey(String serverId, TSIGKey tsigkey) throws ApiException {
        ApiResponse<TSIGKey> localVarResp = createTSIGKeyWithHttpInfo(serverId, tsigkey);
        return localVarResp.getData();
    }

    /**
     * Add a TSIG key
     * This methods add a new TSIGKey. The actual key can be generated by the server or be provided by the client
     * @param serverId The id of the server (required)
     * @param tsigkey The TSIGKey to add (required)
     * @return ApiResponse&lt;TSIGKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. A key with this name already exists </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entry, the TSIGKey provided has issues. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. There was a problem creating the key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TSIGKey> createTSIGKeyWithHttpInfo(String serverId, TSIGKey tsigkey) throws ApiException {
        okhttp3.Call localVarCall = createTSIGKeyValidateBeforeCall(serverId, tsigkey, null);
        Type localVarReturnType = new TypeToken<TSIGKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a TSIG key (asynchronously)
     * This methods add a new TSIGKey. The actual key can be generated by the server or be provided by the client
     * @param serverId The id of the server (required)
     * @param tsigkey The TSIGKey to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. A key with this name already exists </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entry, the TSIGKey provided has issues. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. There was a problem creating the key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTSIGKeyAsync(String serverId, TSIGKey tsigkey, final ApiCallback<TSIGKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTSIGKeyValidateBeforeCall(serverId, tsigkey, _callback);
        Type localVarReturnType = new TypeToken<TSIGKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTSIGKey
     * @param serverId The id of the server to retrieve the key from (required)
     * @param tsigkeyId The id of the TSIGkey. Should match the \&quot;id\&quot; field in the TSIGKey object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK, key was deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. The TSIGKey with the specified tsigkey_id does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. Contains error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTSIGKeyCall(String serverId, String tsigkeyId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/tsigkeys/{tsigkey_id}"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "tsigkey_id" + "\\}", localVarApiClient.escapeString(tsigkeyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTSIGKeyValidateBeforeCall(String serverId, String tsigkeyId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling deleteTSIGKey(Async)");
        }
        
        // verify the required parameter 'tsigkeyId' is set
        if (tsigkeyId == null) {
            throw new ApiException("Missing the required parameter 'tsigkeyId' when calling deleteTSIGKey(Async)");
        }
        

        okhttp3.Call localVarCall = deleteTSIGKeyCall(serverId, tsigkeyId, _callback);
        return localVarCall;

    }

    /**
     * Delete the TSIGKey with tsigkey_id
     * 
     * @param serverId The id of the server to retrieve the key from (required)
     * @param tsigkeyId The id of the TSIGkey. Should match the \&quot;id\&quot; field in the TSIGKey object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK, key was deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. The TSIGKey with the specified tsigkey_id does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. Contains error message </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTSIGKey(String serverId, String tsigkeyId) throws ApiException {
        deleteTSIGKeyWithHttpInfo(serverId, tsigkeyId);
    }

    /**
     * Delete the TSIGKey with tsigkey_id
     * 
     * @param serverId The id of the server to retrieve the key from (required)
     * @param tsigkeyId The id of the TSIGkey. Should match the \&quot;id\&quot; field in the TSIGKey object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK, key was deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. The TSIGKey with the specified tsigkey_id does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. Contains error message </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTSIGKeyWithHttpInfo(String serverId, String tsigkeyId) throws ApiException {
        okhttp3.Call localVarCall = deleteTSIGKeyValidateBeforeCall(serverId, tsigkeyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the TSIGKey with tsigkey_id (asynchronously)
     * 
     * @param serverId The id of the server to retrieve the key from (required)
     * @param tsigkeyId The id of the TSIGkey. Should match the \&quot;id\&quot; field in the TSIGKey object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK, key was deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. The TSIGKey with the specified tsigkey_id does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. Contains error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTSIGKeyAsync(String serverId, String tsigkeyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTSIGKeyValidateBeforeCall(serverId, tsigkeyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTSIGKey
     * @param serverId The id of the server to retrieve the key from (required)
     * @param tsigkeyId The id of the TSIGkey. Should match the \&quot;id\&quot; field in the TSIGKey object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. The TSIGKey with the specified tsigkey_id does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error, keys could not be retrieved. Contains error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTSIGKeyCall(String serverId, String tsigkeyId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/tsigkeys/{tsigkey_id}"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "tsigkey_id" + "\\}", localVarApiClient.escapeString(tsigkeyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTSIGKeyValidateBeforeCall(String serverId, String tsigkeyId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling getTSIGKey(Async)");
        }
        
        // verify the required parameter 'tsigkeyId' is set
        if (tsigkeyId == null) {
            throw new ApiException("Missing the required parameter 'tsigkeyId' when calling getTSIGKey(Async)");
        }
        

        okhttp3.Call localVarCall = getTSIGKeyCall(serverId, tsigkeyId, _callback);
        return localVarCall;

    }

    /**
     * Get a specific TSIGKeys on the server, including the actual key
     * 
     * @param serverId The id of the server to retrieve the key from (required)
     * @param tsigkeyId The id of the TSIGkey. Should match the \&quot;id\&quot; field in the TSIGKey object (required)
     * @return TSIGKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. The TSIGKey with the specified tsigkey_id does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error, keys could not be retrieved. Contains error message </td><td>  -  </td></tr>
     </table>
     */
    public TSIGKey getTSIGKey(String serverId, String tsigkeyId) throws ApiException {
        ApiResponse<TSIGKey> localVarResp = getTSIGKeyWithHttpInfo(serverId, tsigkeyId);
        return localVarResp.getData();
    }

    /**
     * Get a specific TSIGKeys on the server, including the actual key
     * 
     * @param serverId The id of the server to retrieve the key from (required)
     * @param tsigkeyId The id of the TSIGkey. Should match the \&quot;id\&quot; field in the TSIGKey object (required)
     * @return ApiResponse&lt;TSIGKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. The TSIGKey with the specified tsigkey_id does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error, keys could not be retrieved. Contains error message </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TSIGKey> getTSIGKeyWithHttpInfo(String serverId, String tsigkeyId) throws ApiException {
        okhttp3.Call localVarCall = getTSIGKeyValidateBeforeCall(serverId, tsigkeyId, null);
        Type localVarReturnType = new TypeToken<TSIGKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific TSIGKeys on the server, including the actual key (asynchronously)
     * 
     * @param serverId The id of the server to retrieve the key from (required)
     * @param tsigkeyId The id of the TSIGkey. Should match the \&quot;id\&quot; field in the TSIGKey object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. The TSIGKey with the specified tsigkey_id does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error, keys could not be retrieved. Contains error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTSIGKeyAsync(String serverId, String tsigkeyId, final ApiCallback<TSIGKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTSIGKeyValidateBeforeCall(serverId, tsigkeyId, _callback);
        Type localVarReturnType = new TypeToken<TSIGKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTSIGKeys
     * @param serverId The id of the server (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of TSIGKey objects </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error, keys could not be retrieved. Contains error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTSIGKeysCall(String serverId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/tsigkeys"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTSIGKeysValidateBeforeCall(String serverId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling listTSIGKeys(Async)");
        }
        

        okhttp3.Call localVarCall = listTSIGKeysCall(serverId, _callback);
        return localVarCall;

    }

    /**
     * Get all TSIGKeys on the server, except the actual key
     * 
     * @param serverId The id of the server (required)
     * @return List&lt;TSIGKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of TSIGKey objects </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error, keys could not be retrieved. Contains error message </td><td>  -  </td></tr>
     </table>
     */
    public List<TSIGKey> listTSIGKeys(String serverId) throws ApiException {
        ApiResponse<List<TSIGKey>> localVarResp = listTSIGKeysWithHttpInfo(serverId);
        return localVarResp.getData();
    }

    /**
     * Get all TSIGKeys on the server, except the actual key
     * 
     * @param serverId The id of the server (required)
     * @return ApiResponse&lt;List&lt;TSIGKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of TSIGKey objects </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error, keys could not be retrieved. Contains error message </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TSIGKey>> listTSIGKeysWithHttpInfo(String serverId) throws ApiException {
        okhttp3.Call localVarCall = listTSIGKeysValidateBeforeCall(serverId, null);
        Type localVarReturnType = new TypeToken<List<TSIGKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all TSIGKeys on the server, except the actual key (asynchronously)
     * 
     * @param serverId The id of the server (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of TSIGKey objects </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error, keys could not be retrieved. Contains error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTSIGKeysAsync(String serverId, final ApiCallback<List<TSIGKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTSIGKeysValidateBeforeCall(serverId, _callback);
        Type localVarReturnType = new TypeToken<List<TSIGKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putTSIGKey
     * @param serverId The id of the server to retrieve the key from (required)
     * @param tsigkeyId The id of the TSIGkey. Should match the \&quot;id\&quot; field in the TSIGKey object (required)
     * @param tsigkey A (possibly stripped down) TSIGKey object with the new values (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. TSIGKey is changed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. The TSIGKey with the specified tsigkey_id does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. Contains error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putTSIGKeyCall(String serverId, String tsigkeyId, TSIGKey tsigkey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = tsigkey;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/tsigkeys/{tsigkey_id}"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "tsigkey_id" + "\\}", localVarApiClient.escapeString(tsigkeyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putTSIGKeyValidateBeforeCall(String serverId, String tsigkeyId, TSIGKey tsigkey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling putTSIGKey(Async)");
        }
        
        // verify the required parameter 'tsigkeyId' is set
        if (tsigkeyId == null) {
            throw new ApiException("Missing the required parameter 'tsigkeyId' when calling putTSIGKey(Async)");
        }
        
        // verify the required parameter 'tsigkey' is set
        if (tsigkey == null) {
            throw new ApiException("Missing the required parameter 'tsigkey' when calling putTSIGKey(Async)");
        }
        

        okhttp3.Call localVarCall = putTSIGKeyCall(serverId, tsigkeyId, tsigkey, _callback);
        return localVarCall;

    }

    /**
     * 
     * The TSIGKey at tsigkey_id can be changed in multiple ways:  * Changing the Name, this will remove the key with tsigkey_id after adding.  * Changing the Algorithm  * Changing the Key Only the relevant fields have to be provided in the request body. 
     * @param serverId The id of the server to retrieve the key from (required)
     * @param tsigkeyId The id of the TSIGkey. Should match the \&quot;id\&quot; field in the TSIGKey object (required)
     * @param tsigkey A (possibly stripped down) TSIGKey object with the new values (required)
     * @return TSIGKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. TSIGKey is changed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. The TSIGKey with the specified tsigkey_id does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. Contains error message </td><td>  -  </td></tr>
     </table>
     */
    public TSIGKey putTSIGKey(String serverId, String tsigkeyId, TSIGKey tsigkey) throws ApiException {
        ApiResponse<TSIGKey> localVarResp = putTSIGKeyWithHttpInfo(serverId, tsigkeyId, tsigkey);
        return localVarResp.getData();
    }

    /**
     * 
     * The TSIGKey at tsigkey_id can be changed in multiple ways:  * Changing the Name, this will remove the key with tsigkey_id after adding.  * Changing the Algorithm  * Changing the Key Only the relevant fields have to be provided in the request body. 
     * @param serverId The id of the server to retrieve the key from (required)
     * @param tsigkeyId The id of the TSIGkey. Should match the \&quot;id\&quot; field in the TSIGKey object (required)
     * @param tsigkey A (possibly stripped down) TSIGKey object with the new values (required)
     * @return ApiResponse&lt;TSIGKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. TSIGKey is changed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. The TSIGKey with the specified tsigkey_id does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. Contains error message </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TSIGKey> putTSIGKeyWithHttpInfo(String serverId, String tsigkeyId, TSIGKey tsigkey) throws ApiException {
        okhttp3.Call localVarCall = putTSIGKeyValidateBeforeCall(serverId, tsigkeyId, tsigkey, null);
        Type localVarReturnType = new TypeToken<TSIGKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The TSIGKey at tsigkey_id can be changed in multiple ways:  * Changing the Name, this will remove the key with tsigkey_id after adding.  * Changing the Algorithm  * Changing the Key Only the relevant fields have to be provided in the request body. 
     * @param serverId The id of the server to retrieve the key from (required)
     * @param tsigkeyId The id of the TSIGkey. Should match the \&quot;id\&quot; field in the TSIGKey object (required)
     * @param tsigkey A (possibly stripped down) TSIGKey object with the new values (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. TSIGKey is changed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. The TSIGKey with the specified tsigkey_id does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. Contains error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putTSIGKeyAsync(String serverId, String tsigkeyId, TSIGKey tsigkey, final ApiCallback<TSIGKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = putTSIGKeyValidateBeforeCall(serverId, tsigkeyId, tsigkey, _callback);
        Type localVarReturnType = new TypeToken<TSIGKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
