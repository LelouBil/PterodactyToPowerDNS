/*
 * PowerDNS Authoritative HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CacheFlushResult;
import org.openapitools.client.model.Server;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServersApi {
    private ApiClient localVarApiClient;

    public ServersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for cacheFlushByName
     * @param serverId The id of the server to retrieve (required)
     * @param domain The domain name to flush from the cache (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flush successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheFlushByNameCall(String serverId, String domain, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/cache/flush"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cacheFlushByNameValidateBeforeCall(String serverId, String domain, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling cacheFlushByName(Async)");
        }
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling cacheFlushByName(Async)");
        }
        

        okhttp3.Call localVarCall = cacheFlushByNameCall(serverId, domain, _callback);
        return localVarCall;

    }

    /**
     * Flush a cache-entry by name
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param domain The domain name to flush from the cache (required)
     * @return CacheFlushResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flush successful </td><td>  -  </td></tr>
     </table>
     */
    public CacheFlushResult cacheFlushByName(String serverId, String domain) throws ApiException {
        ApiResponse<CacheFlushResult> localVarResp = cacheFlushByNameWithHttpInfo(serverId, domain);
        return localVarResp.getData();
    }

    /**
     * Flush a cache-entry by name
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param domain The domain name to flush from the cache (required)
     * @return ApiResponse&lt;CacheFlushResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flush successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheFlushResult> cacheFlushByNameWithHttpInfo(String serverId, String domain) throws ApiException {
        okhttp3.Call localVarCall = cacheFlushByNameValidateBeforeCall(serverId, domain, null);
        Type localVarReturnType = new TypeToken<CacheFlushResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Flush a cache-entry by name (asynchronously)
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param domain The domain name to flush from the cache (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flush successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheFlushByNameAsync(String serverId, String domain, final ApiCallback<CacheFlushResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = cacheFlushByNameValidateBeforeCall(serverId, domain, _callback);
        Type localVarReturnType = new TypeToken<CacheFlushResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listServer
     * @param serverId The id of the server to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServerCall(String serverId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{server_id}"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listServerValidateBeforeCall(String serverId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling listServer(Async)");
        }
        

        okhttp3.Call localVarCall = listServerCall(serverId, _callback);
        return localVarCall;

    }

    /**
     * List a server
     * 
     * @param serverId The id of the server to retrieve (required)
     * @return Server
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An server </td><td>  -  </td></tr>
     </table>
     */
    public Server listServer(String serverId) throws ApiException {
        ApiResponse<Server> localVarResp = listServerWithHttpInfo(serverId);
        return localVarResp.getData();
    }

    /**
     * List a server
     * 
     * @param serverId The id of the server to retrieve (required)
     * @return ApiResponse&lt;Server&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Server> listServerWithHttpInfo(String serverId) throws ApiException {
        okhttp3.Call localVarCall = listServerValidateBeforeCall(serverId, null);
        Type localVarReturnType = new TypeToken<Server>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a server (asynchronously)
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServerAsync(String serverId, final ApiCallback<Server> _callback) throws ApiException {

        okhttp3.Call localVarCall = listServerValidateBeforeCall(serverId, _callback);
        Type localVarReturnType = new TypeToken<Server>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listServers
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of servers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServersCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listServersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listServersCall(_callback);
        return localVarCall;

    }

    /**
     * List all servers
     * 
     * @return List&lt;Server&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of servers </td><td>  -  </td></tr>
     </table>
     */
    public List<Server> listServers() throws ApiException {
        ApiResponse<List<Server>> localVarResp = listServersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all servers
     * 
     * @return ApiResponse&lt;List&lt;Server&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of servers </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Server>> listServersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listServersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Server>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all servers (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of servers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServersAsync(final ApiCallback<List<Server>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listServersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Server>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
