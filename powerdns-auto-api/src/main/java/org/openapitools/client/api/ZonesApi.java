/*
 * PowerDNS Authoritative HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Zone;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZonesApi {
    private ApiClient localVarApiClient;

    public ZonesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZonesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for axfrExportZone
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call axfrExportZoneCall(String serverId, String zoneId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/zones/{zone_id}/export"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call axfrExportZoneValidateBeforeCall(String serverId, String zoneId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling axfrExportZone(Async)");
        }
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling axfrExportZone(Async)");
        }
        

        okhttp3.Call localVarCall = axfrExportZoneCall(serverId, zoneId, _callback);
        return localVarCall;

    }

    /**
     * Returns the zone in AXFR format.
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String axfrExportZone(String serverId, String zoneId) throws ApiException {
        ApiResponse<String> localVarResp = axfrExportZoneWithHttpInfo(serverId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Returns the zone in AXFR format.
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> axfrExportZoneWithHttpInfo(String serverId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = axfrExportZoneValidateBeforeCall(serverId, zoneId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the zone in AXFR format. (asynchronously)
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call axfrExportZoneAsync(String serverId, String zoneId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = axfrExportZoneValidateBeforeCall(serverId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for axfrRetrieveZone
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call axfrRetrieveZoneCall(String serverId, String zoneId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/zones/{zone_id}/axfr-retrieve"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call axfrRetrieveZoneValidateBeforeCall(String serverId, String zoneId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling axfrRetrieveZone(Async)");
        }
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling axfrRetrieveZone(Async)");
        }
        

        okhttp3.Call localVarCall = axfrRetrieveZoneCall(serverId, zoneId, _callback);
        return localVarCall;

    }

    /**
     * Retrieve slave zone from its master.
     * Fails when zone kind is not Slave, or slave is disabled in the configuration. Clients MUST NOT send a body.
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void axfrRetrieveZone(String serverId, String zoneId) throws ApiException {
        axfrRetrieveZoneWithHttpInfo(serverId, zoneId);
    }

    /**
     * Retrieve slave zone from its master.
     * Fails when zone kind is not Slave, or slave is disabled in the configuration. Clients MUST NOT send a body.
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> axfrRetrieveZoneWithHttpInfo(String serverId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = axfrRetrieveZoneValidateBeforeCall(serverId, zoneId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve slave zone from its master. (asynchronously)
     * Fails when zone kind is not Slave, or slave is disabled in the configuration. Clients MUST NOT send a body.
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call axfrRetrieveZoneAsync(String serverId, String zoneId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = axfrRetrieveZoneValidateBeforeCall(serverId, zoneId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createZone
     * @param serverId The id of the server to retrieve (required)
     * @param zoneStruct The zone struct to patch with (required)
     * @param rrsets “true” (default) or “false”, whether to include the “rrsets” in the response Zone object. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A zone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createZoneCall(String serverId, Zone zoneStruct, Boolean rrsets, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = zoneStruct;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/zones"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (rrsets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rrsets", rrsets));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createZoneValidateBeforeCall(String serverId, Zone zoneStruct, Boolean rrsets, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling createZone(Async)");
        }
        
        // verify the required parameter 'zoneStruct' is set
        if (zoneStruct == null) {
            throw new ApiException("Missing the required parameter 'zoneStruct' when calling createZone(Async)");
        }
        

        okhttp3.Call localVarCall = createZoneCall(serverId, zoneStruct, rrsets, _callback);
        return localVarCall;

    }

    /**
     * Creates a new domain, returns the Zone on creation.
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneStruct The zone struct to patch with (required)
     * @param rrsets “true” (default) or “false”, whether to include the “rrsets” in the response Zone object. (optional, default to true)
     * @return Zone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A zone </td><td>  -  </td></tr>
     </table>
     */
    public Zone createZone(String serverId, Zone zoneStruct, Boolean rrsets) throws ApiException {
        ApiResponse<Zone> localVarResp = createZoneWithHttpInfo(serverId, zoneStruct, rrsets);
        return localVarResp.getData();
    }

    /**
     * Creates a new domain, returns the Zone on creation.
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneStruct The zone struct to patch with (required)
     * @param rrsets “true” (default) or “false”, whether to include the “rrsets” in the response Zone object. (optional, default to true)
     * @return ApiResponse&lt;Zone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A zone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Zone> createZoneWithHttpInfo(String serverId, Zone zoneStruct, Boolean rrsets) throws ApiException {
        okhttp3.Call localVarCall = createZoneValidateBeforeCall(serverId, zoneStruct, rrsets, null);
        Type localVarReturnType = new TypeToken<Zone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new domain, returns the Zone on creation. (asynchronously)
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneStruct The zone struct to patch with (required)
     * @param rrsets “true” (default) or “false”, whether to include the “rrsets” in the response Zone object. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A zone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createZoneAsync(String serverId, Zone zoneStruct, Boolean rrsets, final ApiCallback<Zone> _callback) throws ApiException {

        okhttp3.Call localVarCall = createZoneValidateBeforeCall(serverId, zoneStruct, rrsets, _callback);
        Type localVarReturnType = new TypeToken<Zone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteZone
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns 204 No Content on success. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteZoneCall(String serverId, String zoneId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/zones/{zone_id}"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteZoneValidateBeforeCall(String serverId, String zoneId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling deleteZone(Async)");
        }
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling deleteZone(Async)");
        }
        

        okhttp3.Call localVarCall = deleteZoneCall(serverId, zoneId, _callback);
        return localVarCall;

    }

    /**
     * Deletes this zone, all attached metadata and rrsets.
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns 204 No Content on success. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteZone(String serverId, String zoneId) throws ApiException {
        deleteZoneWithHttpInfo(serverId, zoneId);
    }

    /**
     * Deletes this zone, all attached metadata and rrsets.
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns 204 No Content on success. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteZoneWithHttpInfo(String serverId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = deleteZoneValidateBeforeCall(serverId, zoneId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes this zone, all attached metadata and rrsets. (asynchronously)
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns 204 No Content on success. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteZoneAsync(String serverId, String zoneId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteZoneValidateBeforeCall(serverId, zoneId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listZone
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param rrsets “true” (default) or “false”, whether to include the “rrsets” in the response Zone object. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Zone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listZoneCall(String serverId, String zoneId, Boolean rrsets, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/zones/{zone_id}"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (rrsets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rrsets", rrsets));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listZoneValidateBeforeCall(String serverId, String zoneId, Boolean rrsets, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling listZone(Async)");
        }
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling listZone(Async)");
        }
        

        okhttp3.Call localVarCall = listZoneCall(serverId, zoneId, rrsets, _callback);
        return localVarCall;

    }

    /**
     * zone managed by a server
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param rrsets “true” (default) or “false”, whether to include the “rrsets” in the response Zone object. (optional, default to true)
     * @return Zone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Zone </td><td>  -  </td></tr>
     </table>
     */
    public Zone listZone(String serverId, String zoneId, Boolean rrsets) throws ApiException {
        ApiResponse<Zone> localVarResp = listZoneWithHttpInfo(serverId, zoneId, rrsets);
        return localVarResp.getData();
    }

    /**
     * zone managed by a server
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param rrsets “true” (default) or “false”, whether to include the “rrsets” in the response Zone object. (optional, default to true)
     * @return ApiResponse&lt;Zone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Zone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Zone> listZoneWithHttpInfo(String serverId, String zoneId, Boolean rrsets) throws ApiException {
        okhttp3.Call localVarCall = listZoneValidateBeforeCall(serverId, zoneId, rrsets, null);
        Type localVarReturnType = new TypeToken<Zone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * zone managed by a server (asynchronously)
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param rrsets “true” (default) or “false”, whether to include the “rrsets” in the response Zone object. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Zone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listZoneAsync(String serverId, String zoneId, Boolean rrsets, final ApiCallback<Zone> _callback) throws ApiException {

        okhttp3.Call localVarCall = listZoneValidateBeforeCall(serverId, zoneId, rrsets, _callback);
        Type localVarReturnType = new TypeToken<Zone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listZones
     * @param serverId The id of the server to retrieve (required)
     * @param zone When set to the name of a zone, only this zone is returned. If no zone with that name exists, the response is an empty array. This can e.g. be used to check if a zone exists in the database without having to guess/encode the zone&#39;s id or to check if a zone exists.  (optional)
     * @param dnssec “true” (default) or “false”, whether to include the “dnssec” and ”edited_serial” fields in the Zone objects. Setting this to ”false” will make the query a lot faster. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Zones </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listZonesCall(String serverId, String zone, Boolean dnssec, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/zones"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zone", zone));
        }

        if (dnssec != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dnssec", dnssec));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listZonesValidateBeforeCall(String serverId, String zone, Boolean dnssec, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling listZones(Async)");
        }
        

        okhttp3.Call localVarCall = listZonesCall(serverId, zone, dnssec, _callback);
        return localVarCall;

    }

    /**
     * List all Zones in a server
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zone When set to the name of a zone, only this zone is returned. If no zone with that name exists, the response is an empty array. This can e.g. be used to check if a zone exists in the database without having to guess/encode the zone&#39;s id or to check if a zone exists.  (optional)
     * @param dnssec “true” (default) or “false”, whether to include the “dnssec” and ”edited_serial” fields in the Zone objects. Setting this to ”false” will make the query a lot faster. (optional, default to true)
     * @return List&lt;Zone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Zones </td><td>  -  </td></tr>
     </table>
     */
    public List<Zone> listZones(String serverId, String zone, Boolean dnssec) throws ApiException {
        ApiResponse<List<Zone>> localVarResp = listZonesWithHttpInfo(serverId, zone, dnssec);
        return localVarResp.getData();
    }

    /**
     * List all Zones in a server
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zone When set to the name of a zone, only this zone is returned. If no zone with that name exists, the response is an empty array. This can e.g. be used to check if a zone exists in the database without having to guess/encode the zone&#39;s id or to check if a zone exists.  (optional)
     * @param dnssec “true” (default) or “false”, whether to include the “dnssec” and ”edited_serial” fields in the Zone objects. Setting this to ”false” will make the query a lot faster. (optional, default to true)
     * @return ApiResponse&lt;List&lt;Zone&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Zones </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Zone>> listZonesWithHttpInfo(String serverId, String zone, Boolean dnssec) throws ApiException {
        okhttp3.Call localVarCall = listZonesValidateBeforeCall(serverId, zone, dnssec, null);
        Type localVarReturnType = new TypeToken<List<Zone>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all Zones in a server (asynchronously)
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zone When set to the name of a zone, only this zone is returned. If no zone with that name exists, the response is an empty array. This can e.g. be used to check if a zone exists in the database without having to guess/encode the zone&#39;s id or to check if a zone exists.  (optional)
     * @param dnssec “true” (default) or “false”, whether to include the “dnssec” and ”edited_serial” fields in the Zone objects. Setting this to ”false” will make the query a lot faster. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Zones </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listZonesAsync(String serverId, String zone, Boolean dnssec, final ApiCallback<List<Zone>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listZonesValidateBeforeCall(serverId, zone, dnssec, _callback);
        Type localVarReturnType = new TypeToken<List<Zone>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notifyZone
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notifyZoneCall(String serverId, String zoneId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/zones/{zone_id}/notify"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notifyZoneValidateBeforeCall(String serverId, String zoneId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling notifyZone(Async)");
        }
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling notifyZone(Async)");
        }
        

        okhttp3.Call localVarCall = notifyZoneCall(serverId, zoneId, _callback);
        return localVarCall;

    }

    /**
     * Send a DNS NOTIFY to all slaves.
     * Fails when zone kind is not Master or Slave, or master and slave are disabled in the configuration. Only works for Slave if renotify is on. Clients MUST NOT send a body.
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void notifyZone(String serverId, String zoneId) throws ApiException {
        notifyZoneWithHttpInfo(serverId, zoneId);
    }

    /**
     * Send a DNS NOTIFY to all slaves.
     * Fails when zone kind is not Master or Slave, or master and slave are disabled in the configuration. Only works for Slave if renotify is on. Clients MUST NOT send a body.
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notifyZoneWithHttpInfo(String serverId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = notifyZoneValidateBeforeCall(serverId, zoneId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send a DNS NOTIFY to all slaves. (asynchronously)
     * Fails when zone kind is not Master or Slave, or master and slave are disabled in the configuration. Only works for Slave if renotify is on. Clients MUST NOT send a body.
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notifyZoneAsync(String serverId, String zoneId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notifyZoneValidateBeforeCall(serverId, zoneId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchZone
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId  (required)
     * @param zoneStruct The zone struct to patch with (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns 204 No Content on success. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchZoneCall(String serverId, String zoneId, Zone zoneStruct, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = zoneStruct;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/zones/{zone_id}"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchZoneValidateBeforeCall(String serverId, String zoneId, Zone zoneStruct, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling patchZone(Async)");
        }
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling patchZone(Async)");
        }
        
        // verify the required parameter 'zoneStruct' is set
        if (zoneStruct == null) {
            throw new ApiException("Missing the required parameter 'zoneStruct' when calling patchZone(Async)");
        }
        

        okhttp3.Call localVarCall = patchZoneCall(serverId, zoneId, zoneStruct, _callback);
        return localVarCall;

    }

    /**
     * Creates/modifies/deletes RRsets present in the payload and their comments. Returns 204 No Content on success.
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId  (required)
     * @param zoneStruct The zone struct to patch with (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns 204 No Content on success. </td><td>  -  </td></tr>
     </table>
     */
    public void patchZone(String serverId, String zoneId, Zone zoneStruct) throws ApiException {
        patchZoneWithHttpInfo(serverId, zoneId, zoneStruct);
    }

    /**
     * Creates/modifies/deletes RRsets present in the payload and their comments. Returns 204 No Content on success.
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId  (required)
     * @param zoneStruct The zone struct to patch with (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns 204 No Content on success. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> patchZoneWithHttpInfo(String serverId, String zoneId, Zone zoneStruct) throws ApiException {
        okhttp3.Call localVarCall = patchZoneValidateBeforeCall(serverId, zoneId, zoneStruct, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Creates/modifies/deletes RRsets present in the payload and their comments. Returns 204 No Content on success. (asynchronously)
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId  (required)
     * @param zoneStruct The zone struct to patch with (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns 204 No Content on success. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchZoneAsync(String serverId, String zoneId, Zone zoneStruct, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchZoneValidateBeforeCall(serverId, zoneId, zoneStruct, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putZone
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId  (required)
     * @param zoneStruct The zone struct to patch with (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns 204 No Content on success. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putZoneCall(String serverId, String zoneId, Zone zoneStruct, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = zoneStruct;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/zones/{zone_id}"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putZoneValidateBeforeCall(String serverId, String zoneId, Zone zoneStruct, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling putZone(Async)");
        }
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling putZone(Async)");
        }
        
        // verify the required parameter 'zoneStruct' is set
        if (zoneStruct == null) {
            throw new ApiException("Missing the required parameter 'zoneStruct' when calling putZone(Async)");
        }
        

        okhttp3.Call localVarCall = putZoneCall(serverId, zoneId, zoneStruct, _callback);
        return localVarCall;

    }

    /**
     * Modifies basic zone data (metadata).
     * Allowed fields in client body: all except id, url and name. Returns 204 No Content on success.
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId  (required)
     * @param zoneStruct The zone struct to patch with (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns 204 No Content on success. </td><td>  -  </td></tr>
     </table>
     */
    public void putZone(String serverId, String zoneId, Zone zoneStruct) throws ApiException {
        putZoneWithHttpInfo(serverId, zoneId, zoneStruct);
    }

    /**
     * Modifies basic zone data (metadata).
     * Allowed fields in client body: all except id, url and name. Returns 204 No Content on success.
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId  (required)
     * @param zoneStruct The zone struct to patch with (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns 204 No Content on success. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putZoneWithHttpInfo(String serverId, String zoneId, Zone zoneStruct) throws ApiException {
        okhttp3.Call localVarCall = putZoneValidateBeforeCall(serverId, zoneId, zoneStruct, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Modifies basic zone data (metadata). (asynchronously)
     * Allowed fields in client body: all except id, url and name. Returns 204 No Content on success.
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId  (required)
     * @param zoneStruct The zone struct to patch with (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns 204 No Content on success. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putZoneAsync(String serverId, String zoneId, Zone zoneStruct, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putZoneValidateBeforeCall(serverId, zoneId, zoneStruct, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for rectifyZone
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rectifyZoneCall(String serverId, String zoneId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/zones/{zone_id}/rectify"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rectifyZoneValidateBeforeCall(String serverId, String zoneId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling rectifyZone(Async)");
        }
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling rectifyZone(Async)");
        }
        

        okhttp3.Call localVarCall = rectifyZoneCall(serverId, zoneId, _callback);
        return localVarCall;

    }

    /**
     * Rectify the zone data.
     * This does not take into account the API-RECTIFY metadata. Fails on slave zones and zones that do not have DNSSEC.
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String rectifyZone(String serverId, String zoneId) throws ApiException {
        ApiResponse<String> localVarResp = rectifyZoneWithHttpInfo(serverId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Rectify the zone data.
     * This does not take into account the API-RECTIFY metadata. Fails on slave zones and zones that do not have DNSSEC.
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> rectifyZoneWithHttpInfo(String serverId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = rectifyZoneValidateBeforeCall(serverId, zoneId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rectify the zone data. (asynchronously)
     * This does not take into account the API-RECTIFY metadata. Fails on slave zones and zones that do not have DNSSEC.
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rectifyZoneAsync(String serverId, String zoneId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = rectifyZoneValidateBeforeCall(serverId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
