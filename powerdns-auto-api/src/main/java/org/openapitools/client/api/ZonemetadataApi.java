/*
 * PowerDNS Authoritative HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Metadata;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZonemetadataApi {
    private ApiClient localVarApiClient;

    public ZonemetadataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZonemetadataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createMetadata
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId  (required)
     * @param metadata Metadata object with list of values to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMetadataCall(String serverId, String zoneId, Metadata metadata, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = metadata;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/zones/{zone_id}/metadata"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMetadataValidateBeforeCall(String serverId, String zoneId, Metadata metadata, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling createMetadata(Async)");
        }
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling createMetadata(Async)");
        }
        
        // verify the required parameter 'metadata' is set
        if (metadata == null) {
            throw new ApiException("Missing the required parameter 'metadata' when calling createMetadata(Async)");
        }
        

        okhttp3.Call localVarCall = createMetadataCall(serverId, zoneId, metadata, _callback);
        return localVarCall;

    }

    /**
     * Creates a set of metadata entries
     * Creates a set of metadata entries of given kind for the zone. Existing metadata entries for the zone with the same kind are not overwritten.
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId  (required)
     * @param metadata Metadata object with list of values to create (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void createMetadata(String serverId, String zoneId, Metadata metadata) throws ApiException {
        createMetadataWithHttpInfo(serverId, zoneId, metadata);
    }

    /**
     * Creates a set of metadata entries
     * Creates a set of metadata entries of given kind for the zone. Existing metadata entries for the zone with the same kind are not overwritten.
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId  (required)
     * @param metadata Metadata object with list of values to create (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createMetadataWithHttpInfo(String serverId, String zoneId, Metadata metadata) throws ApiException {
        okhttp3.Call localVarCall = createMetadataValidateBeforeCall(serverId, zoneId, metadata, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Creates a set of metadata entries (asynchronously)
     * Creates a set of metadata entries of given kind for the zone. Existing metadata entries for the zone with the same kind are not overwritten.
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId  (required)
     * @param metadata Metadata object with list of values to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMetadataAsync(String serverId, String zoneId, Metadata metadata, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMetadataValidateBeforeCall(serverId, zoneId, metadata, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMetadata
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param metadataKind The kind of metadata (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMetadataCall(String serverId, String zoneId, String metadataKind, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/zones/{zone_id}/metadata/{metadata_kind}"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()))
            .replaceAll("\\{" + "metadata_kind" + "\\}", localVarApiClient.escapeString(metadataKind.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMetadataValidateBeforeCall(String serverId, String zoneId, String metadataKind, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling deleteMetadata(Async)");
        }
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling deleteMetadata(Async)");
        }
        
        // verify the required parameter 'metadataKind' is set
        if (metadataKind == null) {
            throw new ApiException("Missing the required parameter 'metadataKind' when calling deleteMetadata(Async)");
        }
        

        okhttp3.Call localVarCall = deleteMetadataCall(serverId, zoneId, metadataKind, _callback);
        return localVarCall;

    }

    /**
     * Delete all items of a single kind of domain metadata.
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param metadataKind The kind of metadata (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMetadata(String serverId, String zoneId, String metadataKind) throws ApiException {
        deleteMetadataWithHttpInfo(serverId, zoneId, metadataKind);
    }

    /**
     * Delete all items of a single kind of domain metadata.
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param metadataKind The kind of metadata (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMetadataWithHttpInfo(String serverId, String zoneId, String metadataKind) throws ApiException {
        okhttp3.Call localVarCall = deleteMetadataValidateBeforeCall(serverId, zoneId, metadataKind, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete all items of a single kind of domain metadata. (asynchronously)
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param metadataKind The kind of metadata (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMetadataAsync(String serverId, String zoneId, String metadataKind, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMetadataValidateBeforeCall(serverId, zoneId, metadataKind, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMetadata
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param metadataKind The kind of metadata (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadata object with list of values </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetadataCall(String serverId, String zoneId, String metadataKind, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/zones/{zone_id}/metadata/{metadata_kind}"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()))
            .replaceAll("\\{" + "metadata_kind" + "\\}", localVarApiClient.escapeString(metadataKind.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetadataValidateBeforeCall(String serverId, String zoneId, String metadataKind, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling getMetadata(Async)");
        }
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling getMetadata(Async)");
        }
        
        // verify the required parameter 'metadataKind' is set
        if (metadataKind == null) {
            throw new ApiException("Missing the required parameter 'metadataKind' when calling getMetadata(Async)");
        }
        

        okhttp3.Call localVarCall = getMetadataCall(serverId, zoneId, metadataKind, _callback);
        return localVarCall;

    }

    /**
     * Get the content of a single kind of domain metadata as a Metadata object.
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param metadataKind The kind of metadata (required)
     * @return Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadata object with list of values </td><td>  -  </td></tr>
     </table>
     */
    public Metadata getMetadata(String serverId, String zoneId, String metadataKind) throws ApiException {
        ApiResponse<Metadata> localVarResp = getMetadataWithHttpInfo(serverId, zoneId, metadataKind);
        return localVarResp.getData();
    }

    /**
     * Get the content of a single kind of domain metadata as a Metadata object.
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param metadataKind The kind of metadata (required)
     * @return ApiResponse&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadata object with list of values </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Metadata> getMetadataWithHttpInfo(String serverId, String zoneId, String metadataKind) throws ApiException {
        okhttp3.Call localVarCall = getMetadataValidateBeforeCall(serverId, zoneId, metadataKind, null);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the content of a single kind of domain metadata as a Metadata object. (asynchronously)
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param metadataKind The kind of metadata (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadata object with list of values </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetadataAsync(String serverId, String zoneId, String metadataKind, final ApiCallback<Metadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetadataValidateBeforeCall(serverId, zoneId, metadataKind, _callback);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMetadata
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Metadata objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMetadataCall(String serverId, String zoneId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/zones/{zone_id}/metadata"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMetadataValidateBeforeCall(String serverId, String zoneId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling listMetadata(Async)");
        }
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling listMetadata(Async)");
        }
        

        okhttp3.Call localVarCall = listMetadataCall(serverId, zoneId, _callback);
        return localVarCall;

    }

    /**
     * Get all the Metadata associated with the zone.
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @return List&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Metadata objects </td><td>  -  </td></tr>
     </table>
     */
    public List<Metadata> listMetadata(String serverId, String zoneId) throws ApiException {
        ApiResponse<List<Metadata>> localVarResp = listMetadataWithHttpInfo(serverId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Get all the Metadata associated with the zone.
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @return ApiResponse&lt;List&lt;Metadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Metadata objects </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Metadata>> listMetadataWithHttpInfo(String serverId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = listMetadataValidateBeforeCall(serverId, zoneId, null);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the Metadata associated with the zone. (asynchronously)
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Metadata objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMetadataAsync(String serverId, String zoneId, final ApiCallback<List<Metadata>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMetadataValidateBeforeCall(serverId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifyMetadata
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId  (required)
     * @param metadataKind The kind of metadata (required)
     * @param metadata metadata to add/create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadata object with list of values </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyMetadataCall(String serverId, String zoneId, String metadataKind, Metadata metadata, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = metadata;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/zones/{zone_id}/metadata/{metadata_kind}"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()))
            .replaceAll("\\{" + "metadata_kind" + "\\}", localVarApiClient.escapeString(metadataKind.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyMetadataValidateBeforeCall(String serverId, String zoneId, String metadataKind, Metadata metadata, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling modifyMetadata(Async)");
        }
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling modifyMetadata(Async)");
        }
        
        // verify the required parameter 'metadataKind' is set
        if (metadataKind == null) {
            throw new ApiException("Missing the required parameter 'metadataKind' when calling modifyMetadata(Async)");
        }
        
        // verify the required parameter 'metadata' is set
        if (metadata == null) {
            throw new ApiException("Missing the required parameter 'metadata' when calling modifyMetadata(Async)");
        }
        

        okhttp3.Call localVarCall = modifyMetadataCall(serverId, zoneId, metadataKind, metadata, _callback);
        return localVarCall;

    }

    /**
     * Replace the content of a single kind of domain metadata.
     * Creates a set of metadata entries of given kind for the zone. Existing metadata entries for the zone with the same kind are removed.
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId  (required)
     * @param metadataKind The kind of metadata (required)
     * @param metadata metadata to add/create (required)
     * @return Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadata object with list of values </td><td>  -  </td></tr>
     </table>
     */
    public Metadata modifyMetadata(String serverId, String zoneId, String metadataKind, Metadata metadata) throws ApiException {
        ApiResponse<Metadata> localVarResp = modifyMetadataWithHttpInfo(serverId, zoneId, metadataKind, metadata);
        return localVarResp.getData();
    }

    /**
     * Replace the content of a single kind of domain metadata.
     * Creates a set of metadata entries of given kind for the zone. Existing metadata entries for the zone with the same kind are removed.
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId  (required)
     * @param metadataKind The kind of metadata (required)
     * @param metadata metadata to add/create (required)
     * @return ApiResponse&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadata object with list of values </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Metadata> modifyMetadataWithHttpInfo(String serverId, String zoneId, String metadataKind, Metadata metadata) throws ApiException {
        okhttp3.Call localVarCall = modifyMetadataValidateBeforeCall(serverId, zoneId, metadataKind, metadata, null);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace the content of a single kind of domain metadata. (asynchronously)
     * Creates a set of metadata entries of given kind for the zone. Existing metadata entries for the zone with the same kind are removed.
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId  (required)
     * @param metadataKind The kind of metadata (required)
     * @param metadata metadata to add/create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadata object with list of values </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyMetadataAsync(String serverId, String zoneId, String metadataKind, Metadata metadata, final ApiCallback<Metadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyMetadataValidateBeforeCall(serverId, zoneId, metadataKind, metadata, _callback);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
