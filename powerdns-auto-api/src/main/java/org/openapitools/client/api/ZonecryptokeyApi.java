/*
 * PowerDNS Authoritative HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Cryptokey;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZonecryptokeyApi {
    private ApiClient localVarApiClient;

    public ZonecryptokeyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZonecryptokeyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createCryptokey
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId  (required)
     * @param cryptokey Add a Cryptokey (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCryptokeyCall(String serverId, String zoneId, Cryptokey cryptokey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = cryptokey;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/zones/{zone_id}/cryptokeys"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCryptokeyValidateBeforeCall(String serverId, String zoneId, Cryptokey cryptokey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling createCryptokey(Async)");
        }
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling createCryptokey(Async)");
        }
        
        // verify the required parameter 'cryptokey' is set
        if (cryptokey == null) {
            throw new ApiException("Missing the required parameter 'cryptokey' when calling createCryptokey(Async)");
        }
        

        okhttp3.Call localVarCall = createCryptokeyCall(serverId, zoneId, cryptokey, _callback);
        return localVarCall;

    }

    /**
     * Creates a Cryptokey
     * This method adds a new key to a zone. The key can either be generated or imported by supplying the content parameter. if content, bits and algo are null, a key will be generated based on the default-ksk-algorithm and default-ksk-size settings for a KSK and the default-zsk-algorithm and default-zsk-size options for a ZSK.
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId  (required)
     * @param cryptokey Add a Cryptokey (required)
     * @return Cryptokey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public Cryptokey createCryptokey(String serverId, String zoneId, Cryptokey cryptokey) throws ApiException {
        ApiResponse<Cryptokey> localVarResp = createCryptokeyWithHttpInfo(serverId, zoneId, cryptokey);
        return localVarResp.getData();
    }

    /**
     * Creates a Cryptokey
     * This method adds a new key to a zone. The key can either be generated or imported by supplying the content parameter. if content, bits and algo are null, a key will be generated based on the default-ksk-algorithm and default-ksk-size settings for a KSK and the default-zsk-algorithm and default-zsk-size options for a ZSK.
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId  (required)
     * @param cryptokey Add a Cryptokey (required)
     * @return ApiResponse&lt;Cryptokey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cryptokey> createCryptokeyWithHttpInfo(String serverId, String zoneId, Cryptokey cryptokey) throws ApiException {
        okhttp3.Call localVarCall = createCryptokeyValidateBeforeCall(serverId, zoneId, cryptokey, null);
        Type localVarReturnType = new TypeToken<Cryptokey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a Cryptokey (asynchronously)
     * This method adds a new key to a zone. The key can either be generated or imported by supplying the content parameter. if content, bits and algo are null, a key will be generated based on the default-ksk-algorithm and default-ksk-size settings for a KSK and the default-zsk-algorithm and default-zsk-size options for a ZSK.
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId  (required)
     * @param cryptokey Add a Cryptokey (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCryptokeyAsync(String serverId, String zoneId, Cryptokey cryptokey, final ApiCallback<Cryptokey> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCryptokeyValidateBeforeCall(serverId, zoneId, cryptokey, _callback);
        Type localVarReturnType = new TypeToken<Cryptokey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCryptokey
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param cryptokeyId The id value of the Cryptokey (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returned when something is wrong with the content of the request. Contains an error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCryptokeyCall(String serverId, String zoneId, String cryptokeyId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/zones/{zone_id}/cryptokeys/{cryptokey_id}"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()))
            .replaceAll("\\{" + "cryptokey_id" + "\\}", localVarApiClient.escapeString(cryptokeyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCryptokeyValidateBeforeCall(String serverId, String zoneId, String cryptokeyId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling deleteCryptokey(Async)");
        }
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling deleteCryptokey(Async)");
        }
        
        // verify the required parameter 'cryptokeyId' is set
        if (cryptokeyId == null) {
            throw new ApiException("Missing the required parameter 'cryptokeyId' when calling deleteCryptokey(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCryptokeyCall(serverId, zoneId, cryptokeyId, _callback);
        return localVarCall;

    }

    /**
     * This method deletes a key specified by cryptokey_id.
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param cryptokeyId The id value of the Cryptokey (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returned when something is wrong with the content of the request. Contains an error message </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCryptokey(String serverId, String zoneId, String cryptokeyId) throws ApiException {
        deleteCryptokeyWithHttpInfo(serverId, zoneId, cryptokeyId);
    }

    /**
     * This method deletes a key specified by cryptokey_id.
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param cryptokeyId The id value of the Cryptokey (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returned when something is wrong with the content of the request. Contains an error message </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCryptokeyWithHttpInfo(String serverId, String zoneId, String cryptokeyId) throws ApiException {
        okhttp3.Call localVarCall = deleteCryptokeyValidateBeforeCall(serverId, zoneId, cryptokeyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * This method deletes a key specified by cryptokey_id. (asynchronously)
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param cryptokeyId The id value of the Cryptokey (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returned when something is wrong with the content of the request. Contains an error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCryptokeyAsync(String serverId, String zoneId, String cryptokeyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCryptokeyValidateBeforeCall(serverId, zoneId, cryptokeyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCryptokey
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param cryptokeyId The id value of the CryptoKey (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cryptokey </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCryptokeyCall(String serverId, String zoneId, String cryptokeyId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/zones/{zone_id}/cryptokeys/{cryptokey_id}"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()))
            .replaceAll("\\{" + "cryptokey_id" + "\\}", localVarApiClient.escapeString(cryptokeyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCryptokeyValidateBeforeCall(String serverId, String zoneId, String cryptokeyId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling getCryptokey(Async)");
        }
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling getCryptokey(Async)");
        }
        
        // verify the required parameter 'cryptokeyId' is set
        if (cryptokeyId == null) {
            throw new ApiException("Missing the required parameter 'cryptokeyId' when calling getCryptokey(Async)");
        }
        

        okhttp3.Call localVarCall = getCryptokeyCall(serverId, zoneId, cryptokeyId, _callback);
        return localVarCall;

    }

    /**
     * Returns all data about the CryptoKey, including the privatekey.
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param cryptokeyId The id value of the CryptoKey (required)
     * @return Cryptokey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cryptokey </td><td>  -  </td></tr>
     </table>
     */
    public Cryptokey getCryptokey(String serverId, String zoneId, String cryptokeyId) throws ApiException {
        ApiResponse<Cryptokey> localVarResp = getCryptokeyWithHttpInfo(serverId, zoneId, cryptokeyId);
        return localVarResp.getData();
    }

    /**
     * Returns all data about the CryptoKey, including the privatekey.
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param cryptokeyId The id value of the CryptoKey (required)
     * @return ApiResponse&lt;Cryptokey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cryptokey </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cryptokey> getCryptokeyWithHttpInfo(String serverId, String zoneId, String cryptokeyId) throws ApiException {
        okhttp3.Call localVarCall = getCryptokeyValidateBeforeCall(serverId, zoneId, cryptokeyId, null);
        Type localVarReturnType = new TypeToken<Cryptokey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all data about the CryptoKey, including the privatekey. (asynchronously)
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param cryptokeyId The id value of the CryptoKey (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cryptokey </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCryptokeyAsync(String serverId, String zoneId, String cryptokeyId, final ApiCallback<Cryptokey> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCryptokeyValidateBeforeCall(serverId, zoneId, cryptokeyId, _callback);
        Type localVarReturnType = new TypeToken<Cryptokey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCryptokeys
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Cryptokey objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCryptokeysCall(String serverId, String zoneId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/zones/{zone_id}/cryptokeys"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCryptokeysValidateBeforeCall(String serverId, String zoneId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling listCryptokeys(Async)");
        }
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling listCryptokeys(Async)");
        }
        

        okhttp3.Call localVarCall = listCryptokeysCall(serverId, zoneId, _callback);
        return localVarCall;

    }

    /**
     * Get all CryptoKeys for a zone, except the privatekey
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @return List&lt;Cryptokey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Cryptokey objects </td><td>  -  </td></tr>
     </table>
     */
    public List<Cryptokey> listCryptokeys(String serverId, String zoneId) throws ApiException {
        ApiResponse<List<Cryptokey>> localVarResp = listCryptokeysWithHttpInfo(serverId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Get all CryptoKeys for a zone, except the privatekey
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @return ApiResponse&lt;List&lt;Cryptokey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Cryptokey objects </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Cryptokey>> listCryptokeysWithHttpInfo(String serverId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = listCryptokeysValidateBeforeCall(serverId, zoneId, null);
        Type localVarReturnType = new TypeToken<List<Cryptokey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all CryptoKeys for a zone, except the privatekey (asynchronously)
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId The id of the zone to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Cryptokey objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCryptokeysAsync(String serverId, String zoneId, final ApiCallback<List<Cryptokey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCryptokeysValidateBeforeCall(serverId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<List<Cryptokey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifyCryptokey
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId  (required)
     * @param cryptokeyId Cryptokey to manipulate (required)
     * @param cryptokey the Cryptokey (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returned when something is wrong with the content of the request. Contains an error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyCryptokeyCall(String serverId, String zoneId, String cryptokeyId, Cryptokey cryptokey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = cryptokey;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/zones/{zone_id}/cryptokeys/{cryptokey_id}"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()))
            .replaceAll("\\{" + "cryptokey_id" + "\\}", localVarApiClient.escapeString(cryptokeyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyCryptokeyValidateBeforeCall(String serverId, String zoneId, String cryptokeyId, Cryptokey cryptokey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling modifyCryptokey(Async)");
        }
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling modifyCryptokey(Async)");
        }
        
        // verify the required parameter 'cryptokeyId' is set
        if (cryptokeyId == null) {
            throw new ApiException("Missing the required parameter 'cryptokeyId' when calling modifyCryptokey(Async)");
        }
        
        // verify the required parameter 'cryptokey' is set
        if (cryptokey == null) {
            throw new ApiException("Missing the required parameter 'cryptokey' when calling modifyCryptokey(Async)");
        }
        

        okhttp3.Call localVarCall = modifyCryptokeyCall(serverId, zoneId, cryptokeyId, cryptokey, _callback);
        return localVarCall;

    }

    /**
     * This method (de)activates a key from zone_name specified by cryptokey_id
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId  (required)
     * @param cryptokeyId Cryptokey to manipulate (required)
     * @param cryptokey the Cryptokey (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returned when something is wrong with the content of the request. Contains an error message </td><td>  -  </td></tr>
     </table>
     */
    public void modifyCryptokey(String serverId, String zoneId, String cryptokeyId, Cryptokey cryptokey) throws ApiException {
        modifyCryptokeyWithHttpInfo(serverId, zoneId, cryptokeyId, cryptokey);
    }

    /**
     * This method (de)activates a key from zone_name specified by cryptokey_id
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId  (required)
     * @param cryptokeyId Cryptokey to manipulate (required)
     * @param cryptokey the Cryptokey (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returned when something is wrong with the content of the request. Contains an error message </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> modifyCryptokeyWithHttpInfo(String serverId, String zoneId, String cryptokeyId, Cryptokey cryptokey) throws ApiException {
        okhttp3.Call localVarCall = modifyCryptokeyValidateBeforeCall(serverId, zoneId, cryptokeyId, cryptokey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * This method (de)activates a key from zone_name specified by cryptokey_id (asynchronously)
     * 
     * @param serverId The id of the server to retrieve (required)
     * @param zoneId  (required)
     * @param cryptokeyId Cryptokey to manipulate (required)
     * @param cryptokey the Cryptokey (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returned when something is wrong with the content of the request. Contains an error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyCryptokeyAsync(String serverId, String zoneId, String cryptokeyId, Cryptokey cryptokey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyCryptokeyValidateBeforeCall(serverId, zoneId, cryptokeyId, cryptokey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
