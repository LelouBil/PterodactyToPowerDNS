/*
 * PowerDNS Authoritative HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SearchResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient localVarApiClient;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for searchData
     * @param serverId The id of the server to retrieve (required)
     * @param q The string to search for (required)
     * @param max Maximum number of entries to return (required)
     * @param objectType Type of data to search for, one of “all”, “zone”, “record”, “comment” (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a JSON array with results </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchDataCall(String serverId, String q, Integer max, String objectType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{server_id}/search-data"
            .replaceAll("\\{" + "server_id" + "\\}", localVarApiClient.escapeString(serverId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (objectType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_type", objectType));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchDataValidateBeforeCall(String serverId, String q, Integer max, String objectType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling searchData(Async)");
        }
        
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling searchData(Async)");
        }
        
        // verify the required parameter 'max' is set
        if (max == null) {
            throw new ApiException("Missing the required parameter 'max' when calling searchData(Async)");
        }
        

        okhttp3.Call localVarCall = searchDataCall(serverId, q, max, objectType, _callback);
        return localVarCall;

    }

    /**
     * Search the data inside PowerDNS
     * Search the data inside PowerDNS for search_term and return at most max_results. This includes zones, records and comments. The * character can be used in search_term as a wildcard character and the ? character can be used as a wildcard for a single character.
     * @param serverId The id of the server to retrieve (required)
     * @param q The string to search for (required)
     * @param max Maximum number of entries to return (required)
     * @param objectType Type of data to search for, one of “all”, “zone”, “record”, “comment” (optional)
     * @return List&lt;SearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a JSON array with results </td><td>  -  </td></tr>
     </table>
     */
    public List<SearchResult> searchData(String serverId, String q, Integer max, String objectType) throws ApiException {
        ApiResponse<List<SearchResult>> localVarResp = searchDataWithHttpInfo(serverId, q, max, objectType);
        return localVarResp.getData();
    }

    /**
     * Search the data inside PowerDNS
     * Search the data inside PowerDNS for search_term and return at most max_results. This includes zones, records and comments. The * character can be used in search_term as a wildcard character and the ? character can be used as a wildcard for a single character.
     * @param serverId The id of the server to retrieve (required)
     * @param q The string to search for (required)
     * @param max Maximum number of entries to return (required)
     * @param objectType Type of data to search for, one of “all”, “zone”, “record”, “comment” (optional)
     * @return ApiResponse&lt;List&lt;SearchResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a JSON array with results </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SearchResult>> searchDataWithHttpInfo(String serverId, String q, Integer max, String objectType) throws ApiException {
        okhttp3.Call localVarCall = searchDataValidateBeforeCall(serverId, q, max, objectType, null);
        Type localVarReturnType = new TypeToken<List<SearchResult>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search the data inside PowerDNS (asynchronously)
     * Search the data inside PowerDNS for search_term and return at most max_results. This includes zones, records and comments. The * character can be used in search_term as a wildcard character and the ? character can be used as a wildcard for a single character.
     * @param serverId The id of the server to retrieve (required)
     * @param q The string to search for (required)
     * @param max Maximum number of entries to return (required)
     * @param objectType Type of data to search for, one of “all”, “zone”, “record”, “comment” (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a JSON array with results </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchDataAsync(String serverId, String q, Integer max, String objectType, final ApiCallback<List<SearchResult>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchDataValidateBeforeCall(serverId, q, max, objectType, _callback);
        Type localVarReturnType = new TypeToken<List<SearchResult>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
