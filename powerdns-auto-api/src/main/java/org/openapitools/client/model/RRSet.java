/*
 * PowerDNS Authoritative HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.Comment;
import org.openapitools.client.model.Record;

/**
 * This represents a Resource Record Set (all records with the same name and type).
 */
@ApiModel(description = "This represents a Resource Record Set (all records with the same name and type).")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-08-27T14:59:34.966+02:00[Europe/Paris]")
public class RRSet {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private Integer ttl;

  public static final String SERIALIZED_NAME_CHANGETYPE = "changetype";
  @SerializedName(SERIALIZED_NAME_CHANGETYPE)
  private String changetype;

  public static final String SERIALIZED_NAME_RECORDS = "records";
  @SerializedName(SERIALIZED_NAME_RECORDS)
  private List<Record> records = new ArrayList<Record>();

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private List<Comment> comments = null;


  public RRSet name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name for record set (e.g. “www.powerdns.com.”)
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Name for record set (e.g. “www.powerdns.com.”)")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public RRSet type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of this record (e.g. “A”, “PTR”, “MX”)
   * @return type
  **/
  @ApiModelProperty(required = true, value = "Type of this record (e.g. “A”, “PTR”, “MX”)")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public RRSet ttl(Integer ttl) {
    
    this.ttl = ttl;
    return this;
  }

   /**
   * DNS TTL of the records, in seconds. MUST NOT be included when changetype is set to “DELETE”.
   * @return ttl
  **/
  @ApiModelProperty(required = true, value = "DNS TTL of the records, in seconds. MUST NOT be included when changetype is set to “DELETE”.")

  public Integer getTtl() {
    return ttl;
  }


  public void setTtl(Integer ttl) {
    this.ttl = ttl;
  }


  public RRSet changetype(String changetype) {
    
    this.changetype = changetype;
    return this;
  }

   /**
   * MUST be added when updating the RRSet. Must be REPLACE or DELETE. With DELETE, all existing RRs matching name and type will be deleted, including all comments. With REPLACE: when records is present, all existing RRs matching name and type will be deleted, and then new records given in records will be created. If no records are left, any existing comments will be deleted as well. When comments is present, all existing comments for the RRs matching name and type will be deleted, and then new comments given in comments will be created.
   * @return changetype
  **/
  @ApiModelProperty(required = true, value = "MUST be added when updating the RRSet. Must be REPLACE or DELETE. With DELETE, all existing RRs matching name and type will be deleted, including all comments. With REPLACE: when records is present, all existing RRs matching name and type will be deleted, and then new records given in records will be created. If no records are left, any existing comments will be deleted as well. When comments is present, all existing comments for the RRs matching name and type will be deleted, and then new comments given in comments will be created.")

  public String getChangetype() {
    return changetype;
  }


  public void setChangetype(String changetype) {
    this.changetype = changetype;
  }


  public RRSet records(List<Record> records) {
    
    this.records = records;
    return this;
  }

  public RRSet addRecordsItem(Record recordsItem) {
    this.records.add(recordsItem);
    return this;
  }

   /**
   * All records in this RRSet. When updating Records, this is the list of new records (replacing the old ones). Must be empty when changetype is set to DELETE. An empty list results in deletion of all records (and comments).
   * @return records
  **/
  @ApiModelProperty(required = true, value = "All records in this RRSet. When updating Records, this is the list of new records (replacing the old ones). Must be empty when changetype is set to DELETE. An empty list results in deletion of all records (and comments).")

  public List<Record> getRecords() {
    return records;
  }


  public void setRecords(List<Record> records) {
    this.records = records;
  }


  public RRSet comments(List<Comment> comments) {
    
    this.comments = comments;
    return this;
  }

  public RRSet addCommentsItem(Comment commentsItem) {
    if (this.comments == null) {
      this.comments = new ArrayList<Comment>();
    }
    this.comments.add(commentsItem);
    return this;
  }

   /**
   * List of Comment. Must be empty when changetype is set to DELETE. An empty list results in deletion of all comments. modified_at is optional and defaults to the current server time.
   * @return comments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of Comment. Must be empty when changetype is set to DELETE. An empty list results in deletion of all comments. modified_at is optional and defaults to the current server time.")

  public List<Comment> getComments() {
    return comments;
  }


  public void setComments(List<Comment> comments) {
    this.comments = comments;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RRSet rrSet = (RRSet) o;
    return Objects.equals(this.name, rrSet.name) &&
        Objects.equals(this.type, rrSet.type) &&
        Objects.equals(this.ttl, rrSet.ttl) &&
        Objects.equals(this.changetype, rrSet.changetype) &&
        Objects.equals(this.records, rrSet.records) &&
        Objects.equals(this.comments, rrSet.comments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, ttl, changetype, records, comments);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RRSet {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    changetype: ").append(toIndentedString(changetype)).append("\n");
    sb.append("    records: ").append(toIndentedString(records)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

