/*
 * PowerDNS Authoritative HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Describes a DNSSEC cryptographic key
 */
@ApiModel(description = "Describes a DNSSEC cryptographic key")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-08-27T14:59:34.966+02:00[Europe/Paris]")
public class Cryptokey {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  /**
   * Gets or Sets keytype
   */
  @JsonAdapter(KeytypeEnum.Adapter.class)
  public enum KeytypeEnum {
    KSK("ksk"),
    
    ZSK("zsk"),
    
    CSK("csk");

    private String value;

    KeytypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KeytypeEnum fromValue(String value) {
      for (KeytypeEnum b : KeytypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KeytypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeytypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeytypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KeytypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_KEYTYPE = "keytype";
  @SerializedName(SERIALIZED_NAME_KEYTYPE)
  private KeytypeEnum keytype;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_PUBLISHED = "published";
  @SerializedName(SERIALIZED_NAME_PUBLISHED)
  private Boolean published;

  public static final String SERIALIZED_NAME_DNSKEY = "dnskey";
  @SerializedName(SERIALIZED_NAME_DNSKEY)
  private String dnskey;

  public static final String SERIALIZED_NAME_DS = "ds";
  @SerializedName(SERIALIZED_NAME_DS)
  private List<String> ds = null;

  public static final String SERIALIZED_NAME_PRIVATEKEY = "privatekey";
  @SerializedName(SERIALIZED_NAME_PRIVATEKEY)
  private String privatekey;

  public static final String SERIALIZED_NAME_ALGORITHM = "algorithm";
  @SerializedName(SERIALIZED_NAME_ALGORITHM)
  private String algorithm;

  public static final String SERIALIZED_NAME_BITS = "bits";
  @SerializedName(SERIALIZED_NAME_BITS)
  private Integer bits;


  public Cryptokey type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * set to \&quot;Cryptokey\&quot;
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "set to \"Cryptokey\"")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public Cryptokey id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * The internal identifier, read only
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The internal identifier, read only")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public Cryptokey keytype(KeytypeEnum keytype) {
    
    this.keytype = keytype;
    return this;
  }

   /**
   * Get keytype
   * @return keytype
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public KeytypeEnum getKeytype() {
    return keytype;
  }


  public void setKeytype(KeytypeEnum keytype) {
    this.keytype = keytype;
  }


  public Cryptokey active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * Whether or not the key is in active use
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether or not the key is in active use")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public Cryptokey published(Boolean published) {
    
    this.published = published;
    return this;
  }

   /**
   * Whether or not the DNSKEY record is published in the zone
   * @return published
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether or not the DNSKEY record is published in the zone")

  public Boolean getPublished() {
    return published;
  }


  public void setPublished(Boolean published) {
    this.published = published;
  }


  public Cryptokey dnskey(String dnskey) {
    
    this.dnskey = dnskey;
    return this;
  }

   /**
   * The DNSKEY record for this key
   * @return dnskey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The DNSKEY record for this key")

  public String getDnskey() {
    return dnskey;
  }


  public void setDnskey(String dnskey) {
    this.dnskey = dnskey;
  }


  public Cryptokey ds(List<String> ds) {
    
    this.ds = ds;
    return this;
  }

  public Cryptokey addDsItem(String dsItem) {
    if (this.ds == null) {
      this.ds = new ArrayList<String>();
    }
    this.ds.add(dsItem);
    return this;
  }

   /**
   * An array of DS records for this key
   * @return ds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of DS records for this key")

  public List<String> getDs() {
    return ds;
  }


  public void setDs(List<String> ds) {
    this.ds = ds;
  }


  public Cryptokey privatekey(String privatekey) {
    
    this.privatekey = privatekey;
    return this;
  }

   /**
   * The private key in ISC format
   * @return privatekey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The private key in ISC format")

  public String getPrivatekey() {
    return privatekey;
  }


  public void setPrivatekey(String privatekey) {
    this.privatekey = privatekey;
  }


  public Cryptokey algorithm(String algorithm) {
    
    this.algorithm = algorithm;
    return this;
  }

   /**
   * The name of the algorithm of the key, should be a mnemonic
   * @return algorithm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the algorithm of the key, should be a mnemonic")

  public String getAlgorithm() {
    return algorithm;
  }


  public void setAlgorithm(String algorithm) {
    this.algorithm = algorithm;
  }


  public Cryptokey bits(Integer bits) {
    
    this.bits = bits;
    return this;
  }

   /**
   * The size of the key
   * @return bits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The size of the key")

  public Integer getBits() {
    return bits;
  }


  public void setBits(Integer bits) {
    this.bits = bits;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cryptokey cryptokey = (Cryptokey) o;
    return Objects.equals(this.type, cryptokey.type) &&
        Objects.equals(this.id, cryptokey.id) &&
        Objects.equals(this.keytype, cryptokey.keytype) &&
        Objects.equals(this.active, cryptokey.active) &&
        Objects.equals(this.published, cryptokey.published) &&
        Objects.equals(this.dnskey, cryptokey.dnskey) &&
        Objects.equals(this.ds, cryptokey.ds) &&
        Objects.equals(this.privatekey, cryptokey.privatekey) &&
        Objects.equals(this.algorithm, cryptokey.algorithm) &&
        Objects.equals(this.bits, cryptokey.bits);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, id, keytype, active, published, dnskey, ds, privatekey, algorithm, bits);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cryptokey {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    keytype: ").append(toIndentedString(keytype)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    dnskey: ").append(toIndentedString(dnskey)).append("\n");
    sb.append("    ds: ").append(toIndentedString(ds)).append("\n");
    sb.append("    privatekey: ").append(toIndentedString(privatekey)).append("\n");
    sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
    sb.append("    bits: ").append(toIndentedString(bits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

